"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[3534],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=i.createContext({}),l=function(e){var n=i.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=l(e.components);return i.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),f=l(t),d=r,m=f["".concat(u,".").concat(d)]||f[d]||p[d]||o;return t?i.createElement(m,s(s({ref:n},c),{},{components:t})):i.createElement(m,s({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=f;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var l=2;l<o;l++)s[l]=t[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},5424:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var i=t(7462),r=t(3366),o=(t(7294),t(3905)),s=["components"],a={title:"Disjoint Sets"},u=void 0,l={unversionedId:"dsa/DisjointSets",id:"dsa/DisjointSets",title:"Disjoint Sets",description:"Disjoint Sets/ Union Find",source:"@site/docs/dsa/16. DisjointSets.md",sourceDirName:"dsa",slug:"/dsa/DisjointSets",permalink:"/docs/dsa/DisjointSets",tags:[],version:"current",sidebarPosition:16,frontMatter:{title:"Disjoint Sets"},sidebar:"docs",previous:{title:"Segment Trees",permalink:"/docs/dsa/SegmentTrees"},next:{title:"Binary Indexed Tree",permalink:"/docs/dsa/FenwickTrees"}},c={},p=[{value:"Disjoint Sets/ Union Find",id:"disjoint-sets-union-find",level:2}],f={toc:p};function d(e){var n=e.components,t=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,i.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"disjoint-sets-union-find"},"Disjoint Sets/ Union Find"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"almost O(1) operations: do union of sets, find the set of an item")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class UnionFind {                              \nprivate:\n    vector<int> p, rank, setSize;                       \n    int numSets;\npublic:\n    UnionFind(int N) {\n        p.assign(N, 0); for (int i = 0; i < N; ++i) p[i] = i;\n        rank.assign(N, 0);\n        setSize.assign(N, 1);               // optional feature: size of sets\n        numSets = N;                    // optional feature: number of sets\n    }\n\n    int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }\n    bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }\n\n    int numDisjointSets() { return numSets; }       // optional feature: number of sets\n    int sizeOfSet(int i) { return setSize[findSet(i)]; } // optional feature: size of sets\n\n    void unionSet(int i, int j) {\n        if (isSameSet(i, j)) return;                 \n        int x = findSet(i), y = findSet(j);         \n        if (rank[x] > rank[y]) swap(x, y);           \n        p[x] = y;                                   \n        if (rank[x] == rank[y]) ++rank[y];          \n        setSize[y] += setSize[x];           // optional feature: size of sets            \n        --numSets;                  // optional feature: number of sets             \n    }\n};\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"two speedups",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"using ranks"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"p[i] = findSet(p[i])")," in findSet method")))))}d.isMDXComponent=!0}}]);