"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[3534],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,m=d["".concat(l,".").concat(f)]||d[f]||c[f]||o;return n?i.createElement(m,s(s({ref:t},p),{},{components:n})):i.createElement(m,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var u=2;u<o;u++)s[u]=n[u];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5424:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>u});var i=n(7462),r=(n(7294),n(3905));const o={title:"Disjoint Sets"},s=void 0,a={unversionedId:"dsa/DisjointSets",id:"dsa/DisjointSets",title:"Disjoint Sets",description:"Disjoint Sets/ Union Find",source:"@site/docs/dsa/16. DisjointSets.md",sourceDirName:"dsa",slug:"/dsa/DisjointSets",permalink:"/notes/dsa/DisjointSets",draft:!1,editUrl:"https://github.com/rahul-gill/rahul-gill.github.io/issues/new?title=Problem+on+page+deployed+at+/notes/dsa/DisjointSets&body=%5Bfile%20to%20be%20edited%5D%28https%3A%2F%2Fgithub.com%2Frahul-gill%2Frahul-gill.github.io%2Ftree%2Fmaster%2Fdocs%2Fdsa/16. DisjointSets.md%29",tags:[],version:"current",sidebarPosition:16,frontMatter:{title:"Disjoint Sets"},sidebar:"docs",previous:{title:"Segment Trees",permalink:"/notes/dsa/SegmentTrees"},next:{title:"Binary Indexed Tree",permalink:"/notes/dsa/FenwickTrees"}},l={},u=[{value:"Disjoint Sets/ Union Find",id:"disjoint-sets-union-find",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"disjoint-sets-union-find"},"Disjoint Sets/ Union Find"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"almost O(1) operations: do union of sets, find the set of an item")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class UnionFind {                              \nprivate:\n    vector<int> p, rank, setSize;                       \n    int numSets;\npublic:\n    UnionFind(int N) {\n        p.assign(N, 0); for (int i = 0; i < N; ++i) p[i] = i;\n        rank.assign(N, 0);\n        setSize.assign(N, 1);               // optional feature: size of sets\n        numSets = N;                    // optional feature: number of sets\n    }\n\n    int findSet(int i) { return (p[i] == i) ? i : (p[i] = findSet(p[i])); }\n    bool isSameSet(int i, int j) { return findSet(i) == findSet(j); }\n\n    int numDisjointSets() { return numSets; }       // optional feature: number of sets\n    int sizeOfSet(int i) { return setSize[findSet(i)]; } // optional feature: size of sets\n\n    void unionSet(int i, int j) {\n        if (isSameSet(i, j)) return;                 \n        int x = findSet(i), y = findSet(j);         \n        if (rank[x] > rank[y]) swap(x, y);           \n        p[x] = y;                                   \n        if (rank[x] == rank[y]) ++rank[y];          \n        setSize[y] += setSize[x];           // optional feature: size of sets            \n        --numSets;                  // optional feature: number of sets             \n    }\n};\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"two speedups",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"using ranks"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"p[i] = findSet(p[i])")," in findSet method")))))}c.isMDXComponent=!0}}]);