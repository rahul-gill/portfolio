"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[2135],{5499:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var n=t(7462),l=(t(7294),t(3905)),r=t(4465);const i={title:"SQL"},s=void 0,u={unversionedId:"databases/SQL",id:"databases/SQL",title:"SQL",description:"SQL Language",source:"@site/docs/databases/4. SQL.md",sourceDirName:"databases",slug:"/databases/SQL",permalink:"/notes/databases/SQL",draft:!1,editUrl:"https://github.com/rahul-gill/rahul-gill.github.io/issues/new?title=Problem+on+page+deployed+at+/notes/databases/SQL&body=%5Bfile%20to%20be%20edited%5D%28https%3A%2F%2Fgithub.com%2Frahul-gill%2Frahul-gill.github.io%2Ftree%2Fmaster%2Fdocs%2Fdatabases/4. SQL.md%29",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"SQL"},sidebar:"docs",previous:{title:"Relational Algebra",permalink:"/notes/databases/RelationalAlgebra"},next:{title:"Operating System Introduction",permalink:"/notes/os/Intro"}},o={},d=[{value:"SQL Language",id:"sql-language",level:2},{value:"DDL",id:"ddl",level:2},{value:"Inserting, Deleting and Updating data",id:"inserting-deleting-and-updating-data",level:2},{value:"Basic Simple Table Query",id:"basic-simple-table-query",level:2},{value:"aliases",id:"aliases",level:3},{value:"arithmetic",id:"arithmetic",level:3},{value:"string comparison",id:"string-comparison",level:3},{value:"BETWEEN",id:"between",level:3},{value:"aggregates",id:"aggregates",level:3},{value:"group by",id:"group-by",level:3},{value:"sql evaluation order",id:"sql-evaluation-order",level:3},{value:"Join queries(multiple tables)",id:"join-queriesmultiple-tables",level:2},{value:"combining predicates",id:"combining-predicates",level:3},{value:"nested queries",id:"nested-queries",level:3},{value:"Types of join",id:"types-of-join",level:3},{value:"inner/natural joins: all three queries are equivalent",id:"innernatural-joins-all-three-queries-are-equivalent",level:3},{value:"outer joins",id:"outer-joins",level:3},{value:"Views",id:"views",level:2},{value:"NULL",id:"null",level:2}],m={toc:d};function p(e){let{components:a,...t}=e;return(0,l.kt)("wrapper",(0,n.Z)({},m,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"sql-language"},"SQL Language"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"declarative language: say what you want, not how you get it"),(0,l.kt)("li",{parentName:"ul"},"four sub-languages",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"DDL: data definition language(define and modify schema)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"CREATE, ALTER, DROP, TRUNCATE, RENAME"))),(0,l.kt)("li",{parentName:"ul"},"DML: data manipulation language(queries)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"SELECT, INSERT, UPDATE, DELETE, MERGE"))),(0,l.kt)("li",{parentName:"ul"},"DTL: data control language",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"GRANT, REVOKE"))),(0,l.kt)("li",{parentName:"ul"},"TCL: transaction control language",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"COMMIT, ROLLBACK, SAVEPOINT"))))),(0,l.kt)("li",{parentName:"ul"},"in SQL model of relation, it contains multi-set of rows(duplicate rows allowed)"),(0,l.kt)("li",{parentName:"ul"},"attributes have unique name"),(0,l.kt)("li",{parentName:"ul"},"every column have atomic type(which can't be further broken down)"),(0,l.kt)("li",{parentName:"ul"},"RDBMS: choose and run algorithms for declarative queries")),(0,l.kt)("h2",{id:"ddl"},"DDL"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"defining table/relation")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE Students(\n    sid INTEGER,\n    sname CHAR(20),\n    age FLOAT,\n    PRIMARY KEY (sid)\n);\nCREATE TABLE Conferences(\n    cid INTEGER,\n    cname CHAR(20),\n    topic CHAR(50),\n    PRIMARY KEY (cid)\n);\nCREATE TABLE Meets(\n    sid INTEGER,\n    cid INTEGER,\n    day DATE,\n    PRIMARY KEY (sid, cid, day)\n    FOREIGN KEY (sid)\n        REFERENCES Students\n    FOREIGN KEY (cid)\n        REFERENCES Conferences\n);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"primary key",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"provide unique lookup key for the relation"),(0,l.kt)("li",{parentName:"ul"},"cannot have duplicate values"),(0,l.kt)("li",{parentName:"ul"},"can be made up of more than one column"))),(0,l.kt)("li",{parentName:"ul"},"foreign keys are like pointers to other table",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"by definition a foreign key references primary key of the other table"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DROP TABLE Meets")," will delete the table, ",(0,l.kt)("inlineCode",{parentName:"li"},"TRUNCATE TABLE Meets")," will delete the data of the table, but not the table itself"),(0,l.kt)("li",{parentName:"ul"},"altering tables")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"ALTER TABLE table_name \n    ADD column_name datatype; \nALTER TABLE table_name \n    DROP COLUMN column_name; \nALTER TABLE table_name \n    MODIFY COLUMN column_name datatype;\n")),(0,l.kt)("h2",{id:"inserting-deleting-and-updating-data"},"Inserting, Deleting and Updating data"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"INSERT INTO table_name (column1, column2, column3, ...) \n    VALUES (value1, value2, value3, ...); \n    \nINSERT INTO table_name \n    VALUES (value1, value2, value3, ...); \n    \nUPDATE Customers \n    SET ContactBill = 0, Free= 'yes' \n    WHERE CustomerID = 1;\n\nDELETE FROM table_name WHERE condition; \nDELETE FROM table_name;\n")),(0,l.kt)("h2",{id:"basic-simple-table-query"},"Basic Simple Table Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT [DISTINCT] <column_expression_list>\n    FROM <single_table>\n    [WHERE <predicate> OR <predicate> AND NOT <predicate>]\n    [ORDER BY <columns_list> [{ASC, DESC}]]\n    [LIMIT <num_of_rows>];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"<column_expression_list>")," because we can apply arithmetic oerations etc. on columns and then return them."),(0,l.kt)("li",{parentName:"ul"},"ordering by default is ",(0,l.kt)("inlineCode",{parentName:"li"},"ASC")),(0,l.kt)("li",{parentName:"ul"},"LIMIT without ORDER BY is no-deterministic; will return random n rows"),(0,l.kt)("li",{parentName:"ul"},"example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTINCT S.name, S.gpa, S.age*2 AS a2\n    FROM students AS S \n    WHERE S.dept = 'CS'\n    ORDER BY S.gpa DESC, S.name ASC, a2\n    LIMIT 3;\n")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"aliases"},"aliases"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"2 ways")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"FROM tablea A, tableb B\nFROM tablea as A, tableb as B\n")),(0,l.kt)("h3",{id:"arithmetic"},"arithmetic"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"you can even use it like calculator(outputs a single row in the example)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT \n    log(1000) as  three,\n    exp(ln(2)) as two,\n    cos(0) as one,\n    ln(2*3) = ln(2) + ln(3 ) as sanity;\n")),(0,l.kt)("h3",{id:"string-comparison"},"string comparison"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"LIKE")," operator. This query return ",(0,l.kt)("inlineCode",{parentName:"li"},"str"),"s with ",(0,l.kt)("inlineCode",{parentName:"li"},"snda")," in it")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT str FROM STR_TABLE WHERE str LIKE '%snda%'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"LIKE")," operator,  ",(0,l.kt)("inlineCode",{parentName:"li"},"%")," represent 0/1/more characters, ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," represent one character"),(0,l.kt)("li",{parentName:"ul"},"regex: get sname where sname is like 'B.","*","'(strings are single quoted in sql)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT S.sname\nFROM Sailors as S\nWHERE S.sname REGEXP 'B.*'\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"other may use different operator like PostgreSQL use ",(0,l.kt)("inlineCode",{parentName:"li"},"~"))),(0,l.kt)("h3",{id:"between"},"BETWEEN"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the operands can be numbers, text or dates and this operator is inclusive")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT column_name(s) \n    FROM table_name \n    WHERE column_name BETWEEN value1 AND value2; \n")),(0,l.kt)("h3",{id:"aggregates"},"aggregates"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"like AVG, SUM, COUNT, MIN, MAX"),(0,l.kt)("li",{parentName:"ul"},"returns 1 row"),(0,l.kt)("li",{parentName:"ul"},"example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AVG(S.gpa) FROM Students S WHERE S.dept = 'CS'\n")),(0,l.kt)("h3",{id:"group-by"},"group by"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT AVG(S.gpa), S.dept\n    FROM Students S\n    GROUP BY S.dept\n    HAVING COUNT(*) > 2\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"in the example",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"returns tuples of (avg gpa of the department, department )"),(0,l.kt)("li",{parentName:"ul"},"number of returned rows is equal to unique groups"),(0,l.kt)("li",{parentName:"ul"},"having predicate filter groups which count is greater than two is true; only can be used in aggregate queries")))),(0,l.kt)("h3",{id:"sql-evaluation-order"},"sql evaluation order"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"upto now")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT [DISTINCT] <column_expression_list>\nFROM <single_table>\n[WHERE <predicate>]\n[GROUP BY <column_list>\n[HAVING <predicate>]]\n[ORDER BY <column_list>]\n[LIMIT <integer_value>];\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"evaluation order")),(0,l.kt)(r.G,{config:{},chart:"flowchart LR;\n    FROM --\x3e WHERE --\x3e SELECT\n    SELECT--\x3e a(GROUP BY) --\x3e HAVING --\x3e DISTINCT\n    DISTINCT --\x3e b(ORDER BY) --\x3e LIMIT",mdxType:"Mermaid"}),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"here",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"FROM: identify the table"),(0,l.kt)("li",{parentName:"ul"},"WHERE: filter out rows"),(0,l.kt)("li",{parentName:"ul"},"SELECT: keep needed column in result"),(0,l.kt)("li",{parentName:"ul"},"GROUP BY: form groups and aggregate"),(0,l.kt)("li",{parentName:"ul"},"HAVING: filter out groups"),(0,l.kt)("li",{parentName:"ul"},"DISTINCT: eliminate duplicates"),(0,l.kt)("li",{parentName:"ul"},"ORDER BY and LIMIT: affect rendering of output")))),(0,l.kt)("h2",{id:"join-queriesmultiple-tables"},"Join queries(multiple tables)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"example(its like quering on cross product of the two table)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT Sailors.id, Sailors.sname, Reserves.boatid\nFROM Sailors, Reserves\nWHERE Sailors.id = Reserves.sid\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"to identify column of different table we do ",(0,l.kt)("inlineCode",{parentName:"li"},"tablea.col, tableb.col")," or use aliases otherwise if the column name is only in one table we can use it without table name"),(0,l.kt)("li",{parentName:"ul"},"we can join the same table with aliases: ",(0,l.kt)("strong",{parentName:"li"},"self join"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT x.name, y.name, x.age - y.age\nFROM tablea as x, tablea as y\nWHERE x.age > y.age\n")),(0,l.kt)("h3",{id:"combining-predicates"},"combining predicates"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"returns nothing because color can't be green and red at once")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT R.sid\nFROM Boats B, Reserves R\nWHERE R.bid = B.bid AND\n    (B.color = 'red' AND B.color = 'green');\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"return sailor's sid which have reserved red and green boat")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT R.sid\nFROM Boats B, Reserves R\nWHERE R.bid = B.bid AND B.color = 'red'\n\nINTERSECT\n\nSELECT R.sid\nFROM Boats B, Reserves R\nWHERE R.bid = B.bid AND B.color = 'green';\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"ALL tells to take duplicates(",(0,l.kt)("inlineCode",{parentName:"li"},"UNION ALL"),") if first have 4 copies and second 2 copies result will have 6 copies(summing up cardinality), INTERSECT: minimum of cardinality, EXCEPT: difference of cardinality"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"queryA UNION queryB")," , ",(0,l.kt)("inlineCode",{parentName:"li"},"queryA INTERSECT queryB"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"queryA EXCEPT queryB"),"(take from A which are not in B)")),(0,l.kt)("h3",{id:"nested-queries"},"nested queries"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"we have ",(0,l.kt)("inlineCode",{parentName:"li"},"IN"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"NOT IN"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"EXISTS"),",",(0,l.kt)("inlineCode",{parentName:"li"},"op ANY"),",",(0,l.kt)("inlineCode",{parentName:"li"},"op ALL")),(0,l.kt)("li",{parentName:"ul"},"get sailor names which reserved boat with id 102")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT S.name FROM Sailors S WHERE S.sid IN\n    (SELECT R.sid FROM Reserves R WHERE R.bid = 102)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if we used EXISTS instead of IN, will return all of sailors' tuple if boat 102 is reserved or return empty result, better way is")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT S.name FROM Sailors S WHERE S.sid EXISTS\n    (SELECT R.sid FROM Reserves R WHERE R.bid = 102 AND R.sid = S.sid)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"this is called correlated sub-query: there is a range variable(here S) that comes from outer block which is called correlation variable"),(0,l.kt)("li",{parentName:"ul"},"find sailors whose ratings are greater than some sailor named Popeye(use ALL instead of ANY if rating greater than all Popeyes)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM Sailors S\nWHERE S.rating > ANY(\n    SELECT S2.rating FROM Sailors S2 WHERE S2.sname = 'Popeye'  \n)\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"also, these can be used this way:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM Customers \n    WHERE Country IN ('Germany', 'France', 'UK'); \n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"relational division")," find all the sailors who've reserved all boats: we found a pair of boat and sailor(first & second block) which don't have a reservation(innermost block), but output sailor name",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"innermost queries checks boats, which are reserved by the current sailor we're looking at"),(0,l.kt)("li",{parentName:"ul"},"middle query checks boats, which are not reserved by the sailor"),(0,l.kt)("li",{parentName:"ul"},"so the complete query is asking: find sailors such that for each of them, there is no such boat, which is not reserved by the sailor")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT S.sname FROM Sailors S\nWHERE NOT EXISTS(\n    SELECT B.bid FROM Boats B\n    WHERE NOT EXISTS(\n        SELECT R.bid FROM Reserves R WHERE R.bid = B.bid AND R.sid = S.sid\n    )\n);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"argmax")," find the largest thing in a set of things")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM Sailors S\nWHERE S.rating = (\n    SELECT MAX(S2.rating) FROM Sailors S2\n);\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"argmax: returning only one row(will return arbitrary one)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM Sailors S\nORDER BY rating DESC \nLIMIT 1;\n")),(0,l.kt)("h3",{id:"types-of-join"},"Types of join"),(0,l.kt)("h3",{id:"innernatural-joins-all-three-queries-are-equivalent"},"inner/natural joins: all three queries are equivalent"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT s.sid, s.sname, r.bid\nFROM Sailors S, Reserves R\nWHERE S.sid = R.sid AND S.age > 20;\n\nSELECT s.sid, s.sname, r.bid\nFROM Sailors S INNER JOIN Reserves R\nON S.sid = R.sid WHERE S.age > 20;\n\nSELECT s.sid, s.sname, r.bid\nFROM Sailors S NATURAL JOIN Reserves R\nWHERE S.age > 20;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"inner join is just the usual queries and have a little different syntax"),(0,l.kt)("li",{parentName:"ul"},"natural join have implicit ON condition based on attributes with same name(not a good idea to use natural join)")),(0,l.kt)("h3",{id:"outer-joins"},"outer joins"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"return all matched rows and also unmatched rows from left/right/both tables based on LEFT/RIGHT/FULL OUTER join"),(0,l.kt)("li",{parentName:"ul"},"NULLs are filled in non-matching fields")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT s.sid, s.sname, r.bid\nFROM Sailors S LEFT OUTER JOIN Reserves R\nON S.sid = R.sid;\n")),(0,l.kt)("h2",{id:"views"},"Views"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"named queries; similar to macros or functions")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE VIEW view_name\nAS select_statement;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"to simplifying things"),(0,l.kt)("li",{parentName:"ul"},"for security(access control)"),(0,l.kt)("li",{parentName:"ul"},"evaluated on fly(not stored)"),(0,l.kt)("li",{parentName:"ul"},"usage")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM view_name;\n\nSELECT some_expr FROM view_name, some_table\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"we can also just define sub-query in the ",(0,l.kt)("inlineCode",{parentName:"li"},"FROM")," clause(views on the fly)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT bname, scount\nFROM Boats B, (\n    SELECT B.bid, COUNT(*) FROM Boats B, Reserves R\n    WHERE R.bid = B.bid AND B.color = 'red'\n    GROUP BY B.bid\n) AS Reds(bid, scount)\nWHERE Reds.bid = B.bid AND scount < 10\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"common table expression(CTE): expression define a table which can reused in subsequent parts on query; below query is same as above one")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH Reds(bid, scount) AS(\n    SELECT B.bid, COUNT(*) \n    FROM Boats B, Reserves R\n    WHERE R.bid = B.bid AND B.color = 'red'\n    GROUP BY B.bid\n)\nSELECT bname, scount\nFROM Boats B, Reds\nWHERE Reds.bid = B.bid AND scount < 10\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"multiple CTEs; notice parentheses were just for clarity")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH Reds(bid, scount) AS(\n    SELECT B.bid, COUNT(*) \n    FROM Boats B, Reserves R\n    WHERE R.bid = B.bid AND B.color = 'red'\n    GROUP BY B.bid\n),\nUnpopularReds AS\n    SELECT bname, scount\n    FRON Boats B, Reds\n    WHERE Reds.bid = B.bid AND scount < 10\nSELECT * FROM UnpopularReds;\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"groupby argmax example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WITH maxratings(age, maxrating) AS(\n    SELECT age, MAX(rating)\n    FROM Sailors\n    GROUP BY age    \n)\nSELECT S.*\nFROM Sailors S, maxratings m\nWHERE S.age = m.age AND S.rating = m.maxrating\n")),(0,l.kt)("h2",{id:"null"},"NULL"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x op NULL")," always return ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL"),"(e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"x <= NULL"),") so instead use ",(0,l.kt)("inlineCode",{parentName:"li"},"IS NULL"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"IS NOT NULL"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"WHERE rating IS NOT NULL\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"if where clause evaluates to null, we treat it as false"),(0,l.kt)("li",{parentName:"ul"},"just see when we put True and False in place of Null, if the result it same that result could be used, else result will be Null")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"NOT"),(0,l.kt)("th",{parentName:"tr",align:null},"T"),(0,l.kt)("th",{parentName:"tr",align:null},"F"),(0,l.kt)("th",{parentName:"tr",align:null},"N"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"F"),(0,l.kt)("td",{parentName:"tr",align:null},"T"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"N"))))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"AND"),(0,l.kt)("th",{parentName:"tr",align:null},"T"),(0,l.kt)("th",{parentName:"tr",align:null},"F"),(0,l.kt)("th",{parentName:"tr",align:null},"N"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T"),(0,l.kt)("td",{parentName:"tr",align:null},"T"),(0,l.kt)("td",{parentName:"tr",align:null},"F"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"N"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"F"),(0,l.kt)("td",{parentName:"tr",align:null},"F"),(0,l.kt)("td",{parentName:"tr",align:null},"F"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"F"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"N")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"F")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"N"))))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"OR"),(0,l.kt)("th",{parentName:"tr",align:null},"T"),(0,l.kt)("th",{parentName:"tr",align:null},"F"),(0,l.kt)("th",{parentName:"tr",align:null},"N"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"T"),(0,l.kt)("td",{parentName:"tr",align:null},"T"),(0,l.kt)("td",{parentName:"tr",align:null},"T"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"T"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"F"),(0,l.kt)("td",{parentName:"tr",align:null},"T"),(0,l.kt)("td",{parentName:"tr",align:null},"F"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"N"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"N"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"T")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"N")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"N"))))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SELECT count(*) FROM Sailors")," will add rows with NULLs"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SELECT count(rating) FROM Sailors")," will not count rows with NULL ratings")))}p.isMDXComponent=!0}}]);