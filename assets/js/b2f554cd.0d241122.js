"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"android-learnings","metadata":{"permalink":"/blog/android-learnings","source":"@site/blog/2022-8-26.mdx","title":"Android Development learnings","description":"Contextual Package Structuring","date":"2022-08-26T00:00:00.000Z","formattedDate":"August 26, 2022","tags":[{"label":"android","permalink":"/blog/tags/android"}],"readingTime":1.255,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"android-learnings","title":"Android Development learnings","tags":["android"]},"nextItem":{"title":"Mifos Android UI Library","permalink":"/blog/mifos-ui"}},"content":"### Contextual Package Structuring\\n- bad\\n```text\\norg.myapp\\n\u251c\u2500\u2500 activities\\n\u251c\u2500\u2500 fragments\\n\u251c\u2500\u2500 adapters\\n\u251c\u2500\u2500 data\\n\u2514\u2500\u2500 ...\\n```\\n\x3c!--truncate--\x3e\\n- good\\n```text\\norg.myapp\\n\u251c\u2500\u2500 auth\\n|  \u251c\u2500\u2500 api\\n|  \u251c\u2500\u2500 ui\\n|  |  \u251c\u2500\u2500 LoginScreen.kt\\n|  |  \u2514\u2500\u2500 RegisterScreen.kt.\\n|  \u2514\u2500\u2500 ...\\n\u251c\u2500\u2500 users\\n|  \u251c\u2500\u2500 api\\n|  \u2514\u2500\u2500 ui\\n\u251c\u2500\u2500 posts\\n|  \u2514\u2500\u2500 ...\\n\u251c\u2500\u2500 utils\\n\u2514\u2500\u2500 MyApp.kt\\n```\\n- compare these\\n<div style={{\\n    display: \\"flex\\",\\n    flexFlow: \\"wrap\\"\\n}}>\\n<img src=\\"/img/blog/project_struct0.gif\\" style={{marginRight: \\"8px\\", marginBottom: \\"8px\\"}}/>\\n<img src=\\"/img/blog/project_struct1.gif\\"/>\\n</div>\\n\\n### Latest tech\\nDon\'t stress too much on what\'s the latest, hottest library or thing to use in your app. I\'ve been doing it all the\\ntime though.\\n### Dependency Injection\\n- use it\\n- Don\'t have to implement singleton on your own\\n- provide `Context` to classes requiring it easily\\n- Overall I think it makes you faster as your app grows larger\\n\\n### Not all things that everyone else does are good\\nThese kinds of things\\n- Adding repository classes just for the sake of it\\n```kotlin\\nclass SomeRepository(val dao: DbDao){\\n\\n    override suspend fun insertEvent(event: EventEntity) {\\n        withContext(Dispatchers.IO){\\n            databaseDao.insertEvent(event)\\n        }\\n    }\\n\\n    override suspend fun deleteEvent(event : EventEntity){\\n        withContext(Dispatchers.IO) {\\n            databaseDao.deleteEvent(event)\\n        }\\n    }\\n\\n    override suspend fun loadAllEvents(): List<EventEntity> {\\n        return withContext(Dispatchers.IO) {\\n            return@withContext databaseDao.getAllEvents()\\n        }\\n    }\\n}\\n```\\n- doing that data domain use-case presentation thing in your app which does nothing but store some text in database.\\n### User interface\\n- Get app design files from Figma\\n- User material design components\\n- Jetpack Compose is good but slow"},{"id":"mifos-ui","metadata":{"permalink":"/blog/mifos-ui","source":"@site/blog/2022-6-11-mifos-ui.mdx","title":"Mifos Android UI Library","description":"Target Goals:","date":"2022-06-11T00:00:00.000Z","formattedDate":"June 11, 2022","tags":[{"label":"android","permalink":"/blog/tags/android"},{"label":"GSoC","permalink":"/blog/tags/g-so-c"},{"label":"UI","permalink":"/blog/tags/ui"},{"label":"library","permalink":"/blog/tags/library"}],"readingTime":3.51,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"mifos-ui","title":"Mifos Android UI Library","tags":["android","GSoC","UI","library"]},"prevItem":{"title":"Android Development learnings","permalink":"/blog/android-learnings"},"nextItem":{"title":"Docusaurus features","permalink":"/blog/blog-path"}},"content":"\x3c!--truncate--\x3e\\n## Target Goals:\\n- Develop a common UI library to ensure a consistent look and feel of UIs for all apps\\n- Define a process for migrating apps to use the library\\n- Develop design guidelines and standards for the apps(design document)\\n- Develop base-level widgets, common UI components\\n- Implement screens and workflows to test out on reference sample app\\n- Document how to use the UI library and how to update the app when the library is updated.\\n\\n\x3c!--truncate--\x3e\\n## make developers stop modifying the components\' style in layout files\\n- It would be tedious task for the reviewer to make sure the PR doesn\'t modify the style attributes in layouts(by \\n  using textSize, textColor, padding or similar attributes)\\n- So we\'ll define [custom lint rules](https://github.com/rahul-gill/Mifos-Android-UI/blob/master/lint_check/src/main/java/io/github/rahul_gill/lint_check/StyleAttributeUsageIssue.kt) that will catch this and make the build fail and report the error. Something \\n  like this:\\n```\\n> Task :demoApp:lintDebug FAILED\\nLint found 54 errors, 84 warnings. First failure:\\n\\n/home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/src/main/res/layout/tmp.xml:20: Error: Style attribute usage in layout detected [StyleAttributeUsageIssue from mifos]\\n        android:textSize=\\"24sp\\"\\n        ~~~~~~~~~~~~~~~~~~~~~~~\\n\\nThe full lint text report is located at:\\n  /home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/build/intermediates/lint_intermediate_text_report/debug/lint-results-debug.txt\\n```\\n- The full report lists all errors\\n```\\n/home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/src/main/res/layout/tmp.xml:20: Error: Style attribute usage in layout detected [StyleAttributeUsageIssue from mifos]\\n        android:textSize=\\"24sp\\"\\n        ~~~~~~~~~~~~~~~~~~~~~~~\\n/home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/src/main/res/layout/tmp.xml:21: Error: Style attribute usage in layout detected [StyleAttributeUsageIssue from mifos]\\n        android:textColor=\\"#000000\\"/>\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n/home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/src/main/res/layout/tmp.xml:28: Error: Style attribute usage in layout detected [StyleAttributeUsageIssue from mifos]\\n        android:textSize=\\"18sp\\"\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n/home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/src/main/res/layout/tmp.xml:111: Error: Style attribute usage in layout detected [StyleAttributeUsageIssue from mifos]\\n        android:textColor=\\"?attr/colorPrimary\\"/>\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n/home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/src/main/res/layout/tmp.xml:119: Error: Style attribute usage in layout detected [StyleAttributeUsageIssue from mifos]\\n        android:textColor=\\"?attr/colorPrimary\\"/>\\n        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n/home/ashen-one/AndroidStudioProjects/MifosUI/demoApp/src/main/res/layout/tmp.xml:137: Error: Style attribute usage in layout detected [StyleAttributeUsageIssue from mifos]\\n            android:backgroundTint=\\"?attr/colorPrimary\\"\\n```\\n\\n## Challenge: Dependency management\\n- UI library will have the latest dependency versions. But apps\' dependencies are not updated. Upgrading a single \\n  implementation dependency version may require updating the compileSdkVersion, kotlinVersion, gradlePluginVersion \\n  which may cause many problems.\\n\\n## Themes and styles\\n- we\'ll have to extract common styles used in the apps and provide those styles\\n- apps consuming the styles would only apply these styles only(not provided by the material android libraries)\\n- text styles for these\\n  - link text for things like `forgot password` with click feedback(<u style={{\\"color\\":\\"#4444FF\\"}}>NonClicked</u> \\n    <a style={{\\"color\\":\\"#AAAAFF\\"}}>Clicked</a>)\\n  - secondary text style for things like all rights reserved @copyright etc.,\\n  - list header style,\\n  - main focus text style(like the current account balance on home screen)\\n- Text Field Styles:\\n  - otp fill\\n  - password field\\n  - phone number select\\n  - edit text with action to fill the field(like qr code fetcher)\\n  - edit text with currency selection\\n- commonly used size and spacing values\\n  - text fields vertical padding and fillMaxWidth text fields horizontal padding\\n  - lists:\\n    - spacing between list items\\n    - card inner padding values\\n    - card outer padding values\\n    - item spacer horizontal padding values\\n    - bottom padding for avoiding list items hiding below the FAB\\n    - list item minHeight\\n    - list header left margin and vertical margins\\n  - images:\\n    - OrgIcon width and height\\n    - avatar width and height\\n    - card icon dimensions\\n    - basic icon dimension\\n  - title subtitle spacing\\n  - card corner radius and elevation\\n  - fab margins\\n  - standard margin\\n  - bottom navigation height and elevation\\n  - tooltip(hint) offset(x+,x-,y+,y-)\\n- text focus indication with alpha\\n<div style={{background:\'white\'}}>\\n<div style={{color:\'#d1d1d1\'}}>AAAAAAAAAAAAAAAAAAAAAA</div>\\n<div style={{color:\'#666666bb\'}}>BBBBBBBBBBBBBBBBBBBBBB</div>\\n<div style={{color:\'#000000\'}}>BBBBBBBBBBBBBBBBBBBBBB</div>\\n</div>\\n\\n## Custom widgets\\n- there are some widgets that are built by combining base widgets, for example:\\n  - This kind of cards are used in settings screen, transaction and many other\\n  ![card](/img/blog/7085c9d78eb5485cace28c5a243d3f95.png)\\n  - list of key value pairs  \\n  ![key-val](/img/blog/83bb344bed6840e7af92f92a30fd8dec.png)\\n  - commonly used text field styles: simple, with an action, password, otp\\n  ![text-fields](/img/blog/c168c3d558564d9db69977333d962e4d.png)\\n  - [this](https://dribbble.com/shots/18050792-Mercury-Phone-Input) could be a great for phone number fields\\n  - table view\\n- implementation for these can be provided in the library\\n- also, some custom views are already in the apps, these can be moved to the library; like \\n  - [ProcessView](https://github.com/openMF/mifos-mobile/blob/development/app/src/main/java/org/mifos/mobile/utils/ProcessView.kt), Circular Image View, AvatarView, [MifosPassCodeActivity](https://github.com/openMF/mifos-passcode)\\n- UI extensions like these can be moved to the library\\n  - Correct input verify\\n    - password strength [this](https://github.com/openMF/mobile-wallet/blob/dev/mifospay/src/main/java/org/mifos/mobilewallet/mifospay/utils/PasswordStrength.java)\\n    - email pattern [this](https://github.com/openMF/mobile-wallet/blob/dev/mifospay/src/main/java/org/mifos/mobilewallet/mifospay/utils/ValidateUtil.kt)\\n  - dropdown like visibility change animation [this](https://github.com/openMF/mobile-wallet/blob/dev/mifospay/src/main/java/org/mifos/mobilewallet/mifospay/utils/AnimationUtil.java)\\n  - Dialog builder maybe [this](https://github.com/openMF/mobile-wallet/blob/dev/mifospay/src/main/java/org/mifos/mobilewallet/mifospay/utils/DialogBox.java)\\n  - click listener helper for recycler view with sublist [this](https://github.com/openMF/mobile-wallet/blob/dev/mifospay/src/main/java/org/mifos/mobilewallet/mifospay/utils/RecyclerItemClickListener.java)\\n  - Drawable by name [this](https://github.com/openMF/mobile-wallet/blob/dev/mifospay/src/main/java/org/mifos/mobilewallet/mifospay/utils/TextDrawable.java)\\n  - Divider Decoration [this](https://github.com/openMF/mifos-mobile/blob/development/app/src/main/java/org/mifos/mobile/utils/DividerItemDecoration.kt)\\n  - EndlessRecyclerViewScrollListener [this](https://github.com/openMF/mifos-mobile/blob/development/app/src/main/java/org/mifos/mobile/utils/EndlessRecyclerViewScrollListener.kt)\\n  - ScrollFabBehavior [this](https://github.com/openMF/mifos-mobile/blob/development/app/src/main/java/org/mifos/mobile/utils/ScrollFabBehavior.kt)"},{"id":"blog-path","metadata":{"permalink":"/blog/blog-path","source":"@site/blog/2020-12-03-sample-blog.mdx","title":"Docusaurus features","description":"Tabs","date":"2020-12-03T00:00:00.000Z","formattedDate":"December 3, 2020","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.56,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"blog-path","title":"Docusaurus features","tags":["docusaurus"]},"prevItem":{"title":"Mifos Android UI Library","permalink":"/blog/mifos-ui"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n## Tabs\\n\\n<Tabs>\\n  <TabItem value=\\"apple\\" label=\\"Apple\\" default>\\n    This is an apple \ud83c\udf4e\\n  </TabItem>\\n  <TabItem value=\\"orange\\" label=\\"Orange\\">\\n    This is an orange \ud83c\udf4a\\n  </TabItem>\\n  <TabItem value=\\"banana\\" label=\\"Banana\\">\\n    This is a banana \ud83c\udf4c\\n  </TabItem>\\n</Tabs>\\n\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Admonitions\\n\\n:::note SomeNote\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::tip SomeTip\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::info SomeInfo\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::caution SomeCaution\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::danger SomeDanger\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n## Code block features\\n```cpp\\nint main(){\\n    // highlight-next-line\\n    printf(\\"highlighting a line\\");\\n}\\n```"}]}')}}]);