"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[8505],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),u=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),h=a,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||r;return n?l.createElement(m,o(o({ref:t},c),{},{components:n})):l.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>u});var l=n(7462),a=(n(7294),n(3905));const r={title:"Kotlin Flows and channels"},o=void 0,i={unversionedId:"mobile-app-dev/kotlin-flows",id:"mobile-app-dev/kotlin-flows",title:"Kotlin Flows and channels",description:"Hot and cold streams",source:"@site/docs/mobile-app-dev/kotlin-flows.md",sourceDirName:"mobile-app-dev",slug:"/mobile-app-dev/kotlin-flows",permalink:"/docs/mobile-app-dev/kotlin-flows",draft:!1,tags:[],version:"current",frontMatter:{title:"Kotlin Flows and channels"},sidebar:"docs",previous:{title:"Contents",permalink:"/docs/"},next:{title:"App Ideas",permalink:"/docs/mobile-app-dev/Apps"}},s={},u=[{value:"Hot and cold streams",id:"hot-and-cold-streams",level:2},{value:"Flow",id:"flow",level:2},{value:"Channels",id:"channels",level:2},{value:"StateFlow and SharedFlow",id:"stateflow-and-sharedflow",level:2},{value:"Channels vs SharedFlow",id:"channels-vs-sharedflow",level:2},{value:"Conversions",id:"conversions",level:2}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"hot-and-cold-streams"},"Hot and cold streams"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cold Publisher: For every subscriber, the items start from the beginning."),(0,a.kt)("li",{parentName:"ul"},"Hot Publisher: Does not publish from the beginning. Instead, the values keep on going independently. Any subscriber joining will get the same value that all others do."),(0,a.kt)("li",{parentName:"ul"},"Cold publisher emits data only when they're collected(consumed) and when you subscribe to them, you get all the values it ever produced."),(0,a.kt)("li",{parentName:"ul"},"Hot producers have data even when there are no subscriber. When you subscribe to them, only value produced after you subscribed are emitted.")),(0,a.kt)("h2",{id:"flow"},"Flow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"represent a stream of specific values which can be collected"),(0,a.kt)("li",{parentName:"ul"},"starts emitted when ",(0,a.kt)("inlineCode",{parentName:"li"},"collect")," is called on it"),(0,a.kt)("li",{parentName:"ul"},"flow are cold: emits only when it is collected and emits all values it produced"),(0,a.kt)("li",{parentName:"ul"},"flow is like a pipe, whatever comes inside, goes outside; doesn't stay in the pipe")),(0,a.kt)("h2",{id:"channels"},"Channels"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"channel can receive and emit data, flow can only emit"),(0,a.kt)("li",{parentName:"ul"},"channel is like a queue, can contain a buffer."),(0,a.kt)("li",{parentName:"ul"},"regular channel have one producer and one consumer at a time, BroadcastChannel can have multiple consumers at once"),(0,a.kt)("li",{parentName:"ul"},"these are low level primitives")),(0,a.kt)("h2",{id:"stateflow-and-sharedflow"},"StateFlow and SharedFlow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"hot streams"),(0,a.kt)("li",{parentName:"ul"},"StateFlows have a default value through constructor and emits it immediately when someone starts collecting, while a SharedFlow takes no value and emits nothing by default."),(0,a.kt)("li",{parentName:"ul"},"So for data representing state, user StateFlows and for events use shared flow.")),(0,a.kt)("h2",{id:"channels-vs-sharedflow"},"Channels vs SharedFlow"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"channels don't support multiple subscribers but SharedFlow does"),(0,a.kt)("li",{parentName:"ul"},"SharedFlow will emmit even when there are no subscribers, so if the subscriber went offline for some time, the events will be lost;"),(0,a.kt)("li",{parentName:"ul"},"For example, if UI is listening for ViewModel events through shared flow and a configuration change(like screen rotation) happens which cancels the viewModelScope for some time, if SharedFlow emits event at that time, they'll be lost."),(0,a.kt)("li",{parentName:"ul"},"But Channels which are buffered are like queues, If there are no subscribers, then configured number of items will be stored and emitted to the incoming subscriber."),(0,a.kt)("li",{parentName:"ul"},"So for ViewModel -> UI events, use channels; SharedFlows will work just fine for UI -> ViewModel events(because viewModelScope will not be cancelled when UI is existing)")),(0,a.kt)("h2",{id:"conversions"},"Conversions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Represents the given receive channel as a hot flow")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"channel.receiveAsFlow()\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"flow to a sharedFlow")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"myNormalFlow\n.shareIn(coroutineScope, SharingStarted.WhileSubscribed(), defaultValue)\n")))}d.isMDXComponent=!0}}]);