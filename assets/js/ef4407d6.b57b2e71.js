"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[3025],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),p=l(t),d=i,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8295:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return u},metadata:function(){return l},toc:function(){return f}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],u={titile:"Bit Manipulation"},c=void 0,l={unversionedId:"dsa/BitManipulation",id:"dsa/BitManipulation",title:"BitManipulation",description:"",source:"@site/docs/dsa/14. BitManipulation.md",sourceDirName:"dsa",slug:"/dsa/BitManipulation",permalink:"/docs/dsa/BitManipulation",tags:[],version:"current",sidebarPosition:14,frontMatter:{titile:"Bit Manipulation"},sidebar:"docs",previous:{title:"Counting",permalink:"/docs/dsa/Counting"},next:{title:"Segment Trees",permalink:"/docs/dsa/SegmentTrees"}},s={},f=[],p={toc:f};function d(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"#define isOn(S, j) (S & (1<<j))\n#define setBit(S, j) (S |= (1<<j))\n#define clearBit(S, j) (S &= ~(1<<j))\n#define toggleBit(S, j) (S ^= (1<<j))\n#define lowestOnBit(S) (S & (-S))   //lowest non-zero bit\n#define setAll(S, n) (S = (1<<n)-1)\n\n#define modulo(S, N) ((S) & (N-1))   // returns S % N, where N is a power of 2\n#define isPowerOfTwo(S) (!(S & (S-1)))\n#define nearestPowerOfTwo(S) (1<<lround(log2(S)))\n#define turnOffLastBit(S) ((S) & (S-1))\n#define turnOnLastZero(S) ((S) | (S+1))\n#define turnOffLastConsecutiveBits(S) ((S) & (S+1))\n#define turnOnLastConsecutiveZeroes(S) ((S) | (S-1))\n")))}d.isMDXComponent=!0}}]);