"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[8847],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),s=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(r),m=a,g=c["".concat(u,".").concat(m)]||c[m]||d[m]||o;return r?n.createElement(g,i(i({ref:t},p),{},{components:r})):n.createElement(g,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=c;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2528:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={title:"C++ and STL"},i=void 0,l={unversionedId:"dsa/CppAndSTL",id:"dsa/CppAndSTL",title:"C++ and STL",description:"Array opeartions",source:"@site/docs/dsa/1. CppAndSTL.md",sourceDirName:"dsa",slug:"/dsa/CppAndSTL",permalink:"/notes/dsa/CppAndSTL",draft:!1,editUrl:"https://github.com/rahul-gill/rahul-gill.github.io/issues/new?title=Problem+on+page+deployed+at+/notes/dsa/CppAndSTL&body=%5Bfile%20to%20be%20edited%5D%28https%3A%2F%2Fgithub.com%2Frahul-gill%2Frahul-gill.github.io%2Ftree%2Fmaster%2Fdocs%2Fdsa/1. CppAndSTL.md%29",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"C++ and STL"},sidebar:"docs",previous:{title:"Android Studio Shortcuts",permalink:"/notes/mobile-app-dev/AndroidStudioShortcuts"},next:{title:"Arrays, Searching and Sorting",permalink:"/notes/dsa/ArraysSortingSearching"}},u={},s=[{value:"Array opeartions",id:"array-opeartions",level:2},{value:"Other Data structures&#39; operations",id:"other-data-structures-operations",level:2},{value:"Structured bindings",id:"structured-bindings",level:2},{value:"ConstExpr",id:"constexpr",level:2},{value:"Literals",id:"literals",level:2}],p={toc:s};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"array-opeartions"},"Array opeartions"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"copy(arr_begin, arr_end, result_arr_begin);\n//partial sorting: arr_begin to arr_middle will be sorted and contain smallest elements of array\npartial_sort(arr_begin, arr_middle, arr_end);\n/**\n * lower_bound: resultIterator will point to first element >= target\n * upper_bound: resultIterator will point to first element > target\n */\nlower_bound(arr_begin, arr_end, value); \n/**\n * Finding unique elements\n * - first sort the array\n * - unique makes the sorted array {1,1,2,2,3} => { 1,2,35,*,* } and\n *   returns iterator to first duplicate(marked by *)\n */\nvector<int> v{1,2,3,1,2,5};\nsort(v.begin(),v.end());\nv.erase(unique(v.begin(),v.end()),v.end());\n\n\n\nfill_n(arr_begin, arr_size, value_to_fill);\nreverse(arr_begin, arr_end);\nsort(arr_begin, arr_end);\n//descending sort\nsort(arr_begin, arr_end, [](int a, int b){return a>b;}) \nnext_permutation(arr_begin, arr_end)\n\ntransform(input_begin, input_end,output_begin,operation_function);\nswap(arr_begin, arr_end, result_arr_begin);\nrandom_suffle(arr_begin, arr_end);\n")),(0,a.kt)("h2",{id:"other-data-structures-operations"},"Other Data structures' operations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Stack"),": push, pop, top, empty"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Queue"),": push, pop, front, back, empty"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Dequeue"),": push_back, push_front, pop_back, pop_front, front, back, empty"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Map"),", ",(0,a.kt)("strong",{parentName:"li"},"Set")," and their multi and unordered variants:\ninsert, find, erase, lower_bound(for ordered ones), [] operator")),(0,a.kt)("h1",{id:"lambdas"},"Lambdas"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"syntax: ",(0,a.kt)("inlineCode",{parentName:"li"},"[scope](params){ body }")),(0,a.kt)("li",{parentName:"ul"},"scope is either empty, by reference(with ",(0,a.kt)("inlineCode",{parentName:"li"},"&"),") or by value(with ",(0,a.kt)("inlineCode",{parentName:"li"},"="),")"),(0,a.kt)("li",{parentName:"ul"},"examples")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> map_arr(vector<int> arr, function<int(int)> f){\n    vector<int> ret;\n    for(auto &x: arr)\n        ret.push_back(f(x));\n    return ret;\n}\n\nvector<int> arr{1,2,3,4,5,6,7,8,9,10};\nauto square_arr = map_arr(arr, [](int i) -> int { return i*i; });\n\n//by reference scope example\nint a = 10;\nauto doubleValueOfA = [&](){\n     a = a * 2;\n};\n//by value scope example\nauto readOnlyLambda = [=](){\n     cout<<a<<' ';\n};\n")),(0,a.kt)("h2",{id:"structured-bindings"},"Structured bindings"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"auto [var1, var2] = make_tuple(1,2);\nmap<int,int> mp{ {0,100}, {1, 99} };\nfor(auto[key,value]: mp){\n    doSomethingWithKey(key);\n    doSomethingWithValue(value);\n}\n")),(0,a.kt)("h2",{id:"constexpr"},"ConstExpr"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"for computing values at compile time")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"constexpr int cube (int a){return a * a * a;}\nfloat gk[cube(3)]; // Valid in global scope since C++11: variable 'gk' has 27 elements\n")),(0,a.kt)("h2",{id:"literals"},"Literals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'auto raw_string = R"(Raw String)"\nauto binary_num = 0b11\nauto hex_num = 0x11\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"user defined literal")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'long double operator"" _kg( long double x ){\n    return x*1000;\n}\nlong double operator"" _g( long double x ){\n    return x;\n}\nlong double operator"" _mg( long double x ){\n    return x / 1000;\n}\nauto amnt = 10_kg + 5_mg\n//works only on these(doesn\'t work on signed types):\nchar const*\nunsigned long long\nlong double\nchar const*, std::size_t\nwchar_t const*, std::size_t\nchar16_t const*, std::size_t\nchar32_t const*, std::size_t\n')))}d.isMDXComponent=!0}}]);