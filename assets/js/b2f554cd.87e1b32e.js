"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"history","metadata":{"permalink":"/blog/history","editUrl":"https://github.com/rahul-gill/rahul-gill.github.io/blog/2020-12-21-history.md","source":"@site/blog/2020-12-21-history.md","title":"History","description":"Will write some time when I\'m free","date":"2020-12-21T00:00:00.000Z","formattedDate":"December 21, 2020","tags":[{"label":"sharing","permalink":"/blog/tags/sharing"}],"readingTime":0.04,"truncated":true,"authors":[{"name":"Evan Tay"}],"frontMatter":{"slug":"history","title":"History","author":"Evan Tay","tags":["sharing"]},"nextItem":{"title":"Sample Blog","permalink":"/blog/blog-path"}},"content":"Will write some time when I\'m free \\n\x3c!--truncate--\x3e"},{"id":"blog-path","metadata":{"permalink":"/blog/blog-path","editUrl":"https://github.com/rahul-gill/rahul-gill.github.io/blog/2020-12-03-sample-blog.mdx","source":"@site/blog/2020-12-03-sample-blog.mdx","title":"Sample Blog","description":"Tabs","date":"2020-12-03T00:00:00.000Z","formattedDate":"December 3, 2020","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":4.705,"truncated":true,"authors":[],"frontMatter":{"slug":"blog-path","title":"Sample Blog","tags":["docusaurus"]},"prevItem":{"title":"History","permalink":"/blog/history"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n## Tabs\\n\\n<Tabs>\\n  <TabItem value=\\"apple\\" label=\\"Apple\\" default>\\n    This is an apple \ud83c\udf4e\\n  </TabItem>\\n  <TabItem value=\\"orange\\" label=\\"Orange\\">\\n    This is an orange \ud83c\udf4a\\n  </TabItem>\\n  <TabItem value=\\"banana\\" label=\\"Banana\\">\\n    This is a banana \ud83c\udf4c\\n  </TabItem>\\n</Tabs>\\n\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Admonitions\\n\\n:::note SomeNote\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::tip SomeTip\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::info SomeInfo\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::caution SomeCaution\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n:::danger SomeDanger\\n\\nSome **content** with _markdown_ `syntax`. Check [this `api`](#).\\n\\n:::\\n\\n## Code block features\\n```cpp\\nint main(){\\n    // highlight-next-line\\n    printf(\\"highlighting a line\\");\\n}\\n```\\n\\nChris shared 6 principles to follow when moving from a Monolith to a Microservice architecture.\\n\\nHere are 5 of them :wink: :\\n\\n- Adopt Microservice architecture for the right reasons\\n  - Monolith architecture is not necessary bad (an anti-pattern), it has its valid use-cases\\n  - Adopt Microservice architecture because it allows you to deliver software rapidly, frequently and sustainability, with small, autonomous teams working on the different microservices\\n- Migrate to Microservice architecture incrementally rather than via Big Bang rewrite\\n  - **Strangler Application**: Incrementally migrate functionality from existing Monolith application to new Strangler Microservice application\\n    - Extract existing code modules and database tables out into microservices\\n    - Implement new features as microservices\\n- Consider Return-on-Investment when deciding which modules to convert into microservices\\n    - Consider benefit of decoupling said module\\n    - Consider cost of decoupling\\n      - How difficult it is to do so\\n      - How many inbound dependencies it has\\n        - If module A is depended upon by module B, consider extracting module B first\\n- Define the service boundaries correctly\\n  - Avoid **Runtime Coupling**\\n    - Reduced availability due to reliance of a given microservice on another for serving a given request\\n      - For example, microservice A receives an API request which it can only respond to when its own API request to microservice B is answered first\\n    - Make microservices as self-contained as possible\\n      - Able to respond to a request without making follow-up requests to other microservices\\n  - Avoid **Design-Time Coupling**\\n    - Similar to [Open-Closed Principle](https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle)\\n    - Avoid having to modify other microservices when modifying a given microservice\\n    - Must be able to modify or exend a given microservice independently as much as possible\\n      - Have small and stable API which hides as much implementation complexity as possible\\n      - Hide what you can, not only code but also database schemas, so you can change them without affecting other microservices\\n- Measuring success\\n  - Improved metrics: Reduced lead time, deployment frequency, failure rate, etc.\\n  - Improvements in other \'-ilities\': Availability, Reliability and Scalability \\n\\n## You Won\u2019t BELIEVE This HACK to Improve Your Technical Communication!\\n\\n**Speaker(s)**\\n\\n- [Nikhil Choudhary](https://www.linkedin.com/in/nikhil-c-513647148/): Software Engineer at Open Government Products\\n\\n**Key takeaways**\\n\\nWhen introducing non-technical folks to coding, keep in mind that the most important objective is to convey understanding of core programming concepts.\\n\\nOn that note, here are some tips Nikhil shared:\\n\\n- Forgo coding best practices if doing so make it easier for the audience to understand\\n  - Reduce surface area to increase accessibility, even if it is not good coding practice\\n    - Collapse all HTML, JS and CSS into a single file so students can view everything in one place\\n    - Collapse all functions into one for the same reason as the previous line\\n    - Combine program lines if it makes things clearer\\n- Use real-world examples to explain technical concepts\\n  - For example, use a restaurant scenario to explain `async`\\n- Enable students in sharing their joy/achievement\\n  - Make deploying their application easy\\n    - Can use [Netlify Drop](https://app.netlify.com/drop): Simply drag and drop your HTML, JS, CSS files and Netlify Drop will do the rest for deployments\\n- Practise empathy consciously throughout teaching process to identify ways you can make learning easier for your students\\n\\n## DevOps: Cloud and Back Again\\n\\n**Speaker(s)**\\n\\n- [Mitchell Hashimoto](https://www.linkedin.com/in/mitchellh/): Co-Founder and CTO at HashiCorp\\n\\n**Key takeaways**\\n\\nMitchell shared more about the [Cloud Operating Model](https://www.hashicorp.com/cloud-operating-model) during this session.\\n\\n:::note [Cite](https://www.hashicorp.com/cloud-operating-model)\\n\\n\\"The Cloud Operating Model is a new approach for IT operations that organizations need to use to be successful with cloud adoption and thrive in an era of multi-cloud architecture.\\" - Hashicorp\\n\\n:::\\n\\n|           | Static                                                                         | Dynamic                                                                                                     |\\n|-----------|--------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|\\n| Run       | Dedicated infrastructure to run app on                                         | Scheduled automatically across a fleet (e.g. AWS Auto-Scaling Group, Hashicorp Nomad)                       |\\n| Connect   | Host-based, static IP-addressing                                               | Service-based, dynamic IP addresses due to dynamic provisioning                                             |\\n| Secure    | High-trust environment which is IP-address-based, with clear network perimeter | Low-trust environment with no clear perimeter given multi-tenancy and nature of the Cloud                   |\\n| Provision | Dedicated resources - Physical servers, routers and switches                   | Capacity on-demand, provision VMs, Containers and other managed services, or simply use Serverless services |\\n\\n- Infrastructure operations on the Cloud must follow the Dynamic Cloud Operating Model fully\\n  - Pointless if you provision infrastructure in minutes using Infrastructure-as-Code (IaC), but still manually handle connectivity and security review using tickets\\n  - Have to adopt dynamic cloud operating tools for all 4 layers\\n- Why use IaC for provisioning\\n  - Split Execution from Definition\\n  - Execution can be automated and carried out via API, UI or automatically through Continuous-Integration (CI) tools\\n- How can teams use IaC\\n  - Operations team still necessary, focus on creating and improving blueprints and handling edge-cases when doing so\\n  - Development team creates infrastructure in a self-service manner, using the blueprints created by the Operations team\\nseparating buzz words from crucial tech\\n\\nRead up on Hashicorp\'s white paper on [Cloud Operating Model](https://www.hashicorp.com/cloud-operating-model) for more information."}]}')}}]);