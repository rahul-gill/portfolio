"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[2744],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),c=s(t),m=o,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||a;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=c;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},6037:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={title:"Linked Lists"},i=void 0,d={unversionedId:"dsa/LinkedList",id:"dsa/LinkedList",title:"Linked Lists",description:"reverse linked list",source:"@site/docs/dsa/6.LinkedList.md",sourceDirName:"dsa",slug:"/dsa/LinkedList",permalink:"/notes/dsa/LinkedList",draft:!1,editUrl:"https://github.com/rahul-gill/rahul-gill.github.io/issues/new?title=Problem+on+page+deployed+at+/notes/dsa/LinkedList&body=%5Bfile%20to%20be%20edited%5D%28https%3A%2F%2Fgithub.com%2Frahul-gill%2Frahul-gill.github.io%2Ftree%2Fmaster%2Fdocs%2Fdsa/6.LinkedList.md%29",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Linked Lists"},sidebar:"docs",previous:{title:"String Algorithms",permalink:"/notes/dsa/StringAlgorithms"},next:{title:"Trees",permalink:"/notes/dsa/Trees"}},l={},s=[{value:"reverse linked list",id:"reverse-linked-list",level:2},{value:"remove nth node from the end",id:"remove-nth-node-from-the-end",level:2}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"node_t{\n    int data;\n    node_t* next;\n}\n")),(0,o.kt)("h2",{id:"reverse-linked-list"},"reverse linked list"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"node_t* reverseList(node_t* head) {\n    node_t* prev = NULL;\n    node_t* next = head;\n    while(next){\n        auto tmp = next->next;\n        next->next = prev;\n        prev = next;\n        next = tmp;\n    }\n    return prev;\n}\n\nnode_t* reverseList(node_t* head, node_t* prev = NULL) {\n    if(!head)\n        return prev;\n    auto tmp =  head->next;\n    head->next = prev;\n    return reverseList(tmp, head);\n}\n//creating a new list which is reverse of current list\nnode_t* reverseList(node_t* head) {\n    if(!head || !head->next)\n        return head;\n\n    node_t* new_l = new ListNode(head->val);\n\n    node_t* next = head;\n    while(head && head->next){\n        auto tmp = new ListNode(head->next->val);\n        tmp->next = new_l;\n        new_l = tmp;\n        head = head->next;\n    }\n    return new_l;\n}\n")),(0,o.kt)("h2",{id:"remove-nth-node-from-the-end"},"remove nth node from the end"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"2n approach")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"node_t* removeNthFromEnd(node_t* head, int n){\n    int sz = 0, cnt = 0;\n    auto node = head;\n    while(node){\n        sz++;\n        node = node->next;\n    }\n        \n    if(n ==sz){\n        head = head->next;\n        delete node;\n        return head;\n    }\n    node = head;\n    while(node){\n        cnt++;\n        if(cnt == sz - n)\n            break;\n        node = node->next;\n    }\n    auto tmp = node->next;\n    node->next = node->next->next;\n    delete tmp;\n    return head;\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"better approach using fast slow pointer")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"node_t* removeNthFromEnd(node_t* head, int n){\n    auto dummy = new node_t(0);\n    dummy->next = head;\n    node_t *fast = dummy, *slow = dummy;\n\n    for(int i=0; i<n; ++i)\n        fast = fast->next;\n    while(fast->next){\n        fast = fast->next;\n        slow = slow->next;\n    }\n    if(slow == dummy){\n        auto tmp = head;\n        head = head->next;\n        delete tmp;\n    }\n    else{\n        auto tmp = slow->next;\n        slow->next = slow->next->next;\n        delete tmp;\n    }\n    return head;\n}\n")))}u.isMDXComponent=!0}}]);