"use strict";(self.webpackChunkrahul_gill_github_io=self.webpackChunkrahul_gill_github_io||[]).push([[4729],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||s;return r?n.createElement(h,o(o({ref:t},c),{},{components:r})):n.createElement(h,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<s;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2014:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const s={title:"Operating System Introduction"},o=void 0,i={unversionedId:"os/Intro",id:"os/Intro",title:"Operating System Introduction",description:"- OS",source:"@site/docs/os/1. Intro.md",sourceDirName:"os",slug:"/os/Intro",permalink:"/notes/os/Intro",draft:!1,editUrl:"https://github.com/rahul-gill/rahul-gill.github.io/issues/new?title=Problem+on+page+deployed+at+/notes/os/Intro&body=%5Bfile%20to%20be%20edited%5D%28https%3A%2F%2Fgithub.com%2Frahul-gill%2Frahul-gill.github.io%2Ftree%2Fmaster%2Fdocs%2Fos/1. Intro.md%29",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Operating System Introduction"},sidebar:"docs",previous:{title:"SQL",permalink:"/notes/databases/SQL"},next:{title:"Processes and threads",permalink:"/notes/os/Processes"}},l={},p=[{value:"Syscalls",id:"syscalls",level:2},{value:"Processes",id:"processes",level:2}],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"OS"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"a virtual machine(virtualizing physical software)"),(0,a.kt)("li",{parentName:"ul"},"resource manager(manges cpu, disk, memory etc.)"),(0,a.kt)("li",{parentName:"ul"},"standard library(providing syscalls for some operations)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Goals in OS design"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"building abstraction(of hardware so programs don't have to deal with hardware directly)"),(0,a.kt)("li",{parentName:"ul"},"performance(making best use of available hardware)"),(0,a.kt)("li",{parentName:"ul"},"reliability(for example in NASA ops)"),(0,a.kt)("li",{parentName:"ul"},"protection(between programs so one doesn't affect other)"),(0,a.kt)("li",{parentName:"ul"},"efficiency(managing hardware usage based on needs)"),(0,a.kt)("li",{parentName:"ul"},"security(of important data)"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"preemptive os"),": monitors and controls processes by themselves(for example switch to another process if current process' share is done)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"cooperative os"),": rely on processes to cooperate")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"os type"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"single process os"),(0,a.kt)("li",{parentName:"ul"},"multiprogramming os: multiple processes are scheduled, only one runs. If current running process do IO, then OS runs another process"),(0,a.kt)("li",{parentName:"ul"},"time sharing/multi tasking OS: many processes run concurrently"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"parallel execution of processes: processes execute simultaneously on different core for example")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"concurrent execution: processes execute simultaneously or switches frequently giving if both on same core")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"kernel mode & usermode"),": privillaged operations are done in kernel mode with hardware support. when a process running in usermode wants to do some privillaged operations, it calls some syscall storing arguments at predetermined locations(this done by c wrapper functions). The call generates a trap and then syscall is handled by kernel. This way program can't execute arbitrary operations but only operations predefined by os. this is limited direct execution.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"when a process run on a single core processor machine,the only way kernel gets handle on cpu is when the program promptly exit.To stop process from hijacking cpu this way, interrupt timers are used. These timers periodically generate trap which handles the control to kernel. How to do the handling is decided by scheduler"))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Limited direct execution")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"- OS@boot(kernel mode)\n    - initialize trap tables for trap handling\n    - start interrupt timer\n- OS@process_creation(kernel mode)\n    - create entry for process in process table\n    - allocate memory for program\n    - load program in memory(code section, static data, global variables)\n    - setup stack and heap(with main args in stack)\n    - <return-from-trap>\n- hardware\n    - restore registers from kernel stack\n    - switch to user mode\n    - jump to main\n- program(user mode) calling a syscall\n    - program running\n    - c sycall wrapper function called\n    - wrapper function puts sycall no and arguments in well known locations\n    - <trap>\n- OS(kernel mode)\n    - process state saved on kernel stack\n    - os library handles the trap\n    - <return-from-trap>\n- program(user mode) exiting\n    - program running\n    - <trap-exit-syscall>\n- OS(kernel mode)\n    - free memory of process\n    - remote its entry from process table\n")),(0,a.kt)("h2",{id:"syscalls"},"Syscalls"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the library provided by OS"),(0,a.kt)("li",{parentName:"ul"},"some syscalls in linux")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"ssize_t read(int fd, void *buf, size_t count);\nssize_t write(int fd, void *buf, size_t count);\n\n//flags like O_CREAT, O_RDWR, O_TRUNC etc.\n//mode specified permissions for newly created file\ninf fd = open(const char *path, inf flags, mod_t mode);\nclose(int fd);\nint pipe(int pipefd[2]); //return 0 in success\n\n/*\n * fork creates a new child process, clone of current process \n * but copy on write initializion is done,\n * meaning instead of allocating resources right away, \n * page allocation is done when a memory write is performed\n */\npid_t fork(void)\nvoid exit(int status)\n//execute program at given path with given arguments\nint execvp(const char *path, char *const argv[])\n//wait until one of the children processes exit, save return status in wstatus and return pid of finished child\npid_t child_pid = wait(int *wstatus)\npid_t wait4(pid_t pid, int *wstatus, ...)\nint kill(pid_t pid, int sig)\npid_t getpid()\npid_t getppid()\n")),(0,a.kt)("br",null),(0,a.kt)("img",{src:"/img/docs/os/intro1.png",style:{backgroundColor:"#333"}}),(0,a.kt)("img",{src:"/img/docs/os/intro2.png",style:{backgroundColor:"#333"}}),(0,a.kt)("h2",{id:"processes"},"Processes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"executing instance of a program"),(0,a.kt)("li",{parentName:"ul"},"there can be multiple proceses of single program running at the same time"),(0,a.kt)("li",{parentName:"ul"},"process resources",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"memory(address space)"),(0,a.kt)("li",{parentName:"ul"},"registers(cpu or process state)"),(0,a.kt)("li",{parentName:"ul"},"threads of execution"),(0,a.kt)("li",{parentName:"ul"},"data section(global variables)"))),(0,a.kt)("li",{parentName:"ul"},"kernel schedules threads rather than processes"),(0,a.kt)("li",{parentName:"ul"},"linux doesn't differentiate between processes and threads, threads are just special processes which share virtual memory address space and/or file descriptors(",(0,a.kt)("inlineCode",{parentName:"li"},"clone")," syscall can be used to create threads but pthread library is used because its easier to use and more portable)"),(0,a.kt)("li",{parentName:"ul"},'There is one "kernel stack" per CPU like ISR Stack and one "kernel stack" per Process. There is one "user stack" for each process, though each thread has its own stack, including both user and kernel threads.'),(0,a.kt)("li",{parentName:"ul"},"When a process enters kernel mode as the result of a system call, the stack is switched from the user mode stack to the kernel stack. This is done to preserve the integrity of the kernel, otherwise the process (another thread, for example) could do some nasty things to the stack."),(0,a.kt)("li",{parentName:"ul"},"example struct for process")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"struct context{\n    int eip, esp, ebx, ecx, edx, esi, edi, ebp;\n}\nenum proc_state{\n    UNUSED, SLEEPING, RUNNABLE, RUNNING, EMBRYO, ZOMBIE\n}\nstruct proc{\n    char* mem; //start of process memory\n    uint sz; //memory size\n    char *kstack; //bottom of kernel stack\n    enum proc_state state;\n    int pid;\n    struct proc *parent;\n    int killed; //if zero, then killed\n    struct inode* cwd; //current directory\n    struct context context;\n    struct trapframe *tf;\n    void *chan; //channel used for example when process sleep for console input\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"the cpu state is about context switch, while trapframe holds userspace state saved in tcb(thread control block) after exception or irq(interrupt request) have arised"),(0,a.kt)("li",{parentName:"ul"},"process creating steps",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"load code and any static data in memory(usually done lazily by today's operating systems)"),(0,a.kt)("li",{parentName:"ul"},"allocate memory for stack and initialize it with arguments of main function; allocate memory for heap"),(0,a.kt)("li",{parentName:"ul"},"do other initialization tasks(e.g. three file descriptors are opened: stdin, stdout, stderr)"),(0,a.kt)("li",{parentName:"ul"},"run program from entry point main")))))}u.isMDXComponent=!0}}]);